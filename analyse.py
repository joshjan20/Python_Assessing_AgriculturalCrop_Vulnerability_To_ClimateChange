import geopandas as gpd
import xarray as xr
import numpy as np
import pandas as pd
import folium
from shapely.geometry import Point


# Function to downscale climate data
def downscale_climate_data(climate_ds):
    # Example logic to extract temperature and precipitation
    temperature_data = climate_ds['temperature']
    precipitation_data = climate_ds['precipitation']

    # Calculate mean temperature and precipitation for analysis
    mean_temp = temperature_data.mean(dim='time')
    mean_prec = precipitation_data.mean(dim='time')

    # Create a DataFrame for easy handling
    climate_df = pd.DataFrame({
        'mean_temp': mean_temp.values.flatten(),
        'mean_prec': mean_prec.values.flatten(),
        'lat': np.repeat(climate_ds['lat'].values, climate_ds['lon'].size),
        'lon': np.tile(climate_ds['lon'].values, climate_ds['lat'].size)
    })

    return climate_df


# Function to analyze crop vulnerability
def analyze_crop_vulnerability(original_crops, climate_df):
    # Debugging: print original crops
    print("Original crops DataFrame:")
    print(original_crops)

    # Convert climate_df to a GeoDataFrame
    climate_geometry = [Point(xy) for xy in zip(climate_df['lon'], climate_df['lat'])]
    climate_gdf = gpd.GeoDataFrame(climate_df, geometry=climate_geometry, crs="EPSG:4326")  # Adjust CRS as necessary

    # Merging climate data with original crops based on spatial join
    vulnerable_crops = gpd.sjoin(original_crops, climate_gdf, how='inner', op='intersects')

    # Debugging: print vulnerable crops before filtering
    print("Vulnerable crops before filtering:")
    print(vulnerable_crops)

    # Apply filtering based on temperature and precipitation thresholds
    vulnerable_crops = vulnerable_crops[
        (vulnerable_crops['mean_temp'] > temperature_threshold) &
        (vulnerable_crops['mean_prec'] < precipitation_threshold)
        ]

    # Debugging: print filtered vulnerable crops
    print("Filtered vulnerable crops DataFrame:")
    print(vulnerable_crops)

    return vulnerable_crops


# Function to visualize vulnerable crops
def visualize_vulnerability(vulnerable_crops):
    # Create a Folium map centered on the average location of the crops
    if not vulnerable_crops.empty:
        m = folium.Map(location=[vulnerable_crops.geometry.y.mean(), vulnerable_crops.geometry.x.mean()], zoom_start=6)

        for _, row in vulnerable_crops.iterrows():
            folium.Marker(
                location=[row.geometry.y, row.geometry.x],
                popup=row['name']
            ).add_to(m)

        # Save the map as an HTML file
        m.save("vulnerable_crops_map.html")
        print("Map saved as vulnerable_crops_map.html")
    else:
        print("No crops to visualize.")


# Main function
def main():
    # Load geospatial data of crops
    original_crops = gpd.read_file("crop_locations.shp")  # Replace with your shapefile path

    # Load climate data (NetCDF format)
    climate_ds = xr.open_dataset("climate_data.nc")  # Replace with your NetCDF file path

    # Downscale climate data
    climate_df = downscale_climate_data(climate_ds)

    # Set parameters for vulnerability analysis
    global temperature_threshold, precipitation_threshold
    temperature_threshold = 30  # degrees Celsius
    precipitation_threshold = 50  # mm

    # Analyze vulnerability
    vulnerable_crops = analyze_crop_vulnerability(original_crops, climate_df)

    # Visualize if there are vulnerable crops
    if not vulnerable_crops.empty:
        visualize_vulnerability(vulnerable_crops)
    else:
        print("No valid crops to visualize after filtering.")


# Call the main function
if __name__ == "__main__":
    main()
